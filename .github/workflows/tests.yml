name: Tests and Coverage

on:
  pull_request:
  push:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install perphil-only dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e '.[dev]'
          pip install pytest-cov coverage

      - name: Install Firedrake and PETSc
        run: |
          inv install-firedrake

      - name: Run tests with coverage
        run: |
          pytest --cov=src/perphil --cov-report=xml --cov-report=term-missing

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

      - name: Generate coverage summary
        id: cov
        if: github.event_name == 'pull_request'
        run: |
          python - <<'PY'
          import os, xml.etree.ElementTree as ET
          tree = ET.parse('coverage.xml')
          root = tree.getroot()
          # coverage.py XML has 'line-rate' on root
          try:
              rate = float(root.attrib.get('line-rate', '0')) * 100.0
          except Exception:
              rate = 0.0
          comment = f"<!-- coverage-report -->\nCoverage: {rate:.2f}%\n"
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write('comment<<EOF\n')
              f.write(comment)
              f.write('\nEOF\n')
          PY

      - name: Post/Update coverage comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const marker = '<!-- coverage-report -->';
            const body = `${{ steps.cov.outputs.comment }}`;
            const pr = context.payload.pull_request;
            if (!pr) {
              core.info('Not a pull request, skipping comment.');
              return;
            }
            const { owner, repo } = context.repo;
            const issue_number = pr.number;
            const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number });
            const existing = comments.find(c => c.user && c.user.type === 'Bot' && c.body && c.body.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body });
              core.info('Updated existing coverage comment.');
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number, body });
              core.info('Created new coverage comment.');
            }
